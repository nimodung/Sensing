
TemperInsert.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000d56  00000dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  0080012e  0080012e  00000e18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a8  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b60  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa4  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  00003c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000940  00000000  00000000  000041e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004b27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 01 	call	0x200	; 0x200 <main>
  9e:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_init>:
   return 0;
}

void DHT11_init(void)
{
   DHT11_DDR |= 1 << DHT11_PORT_num;
  a6:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
  a8:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	8b e7       	ldi	r24, 0x7B	; 123
  ae:	92 e9       	ldi	r25, 0x92	; 146
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <DHT11_init+0xa>
  b8:	00 c0       	rjmp	.+0      	; 0xba <DHT11_init+0x14>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <rx_byte>:
   
   return;
}

char rx_byte(void)
{
  be:	48 e0       	ldi	r20, 0x08	; 8
  c0:	50 e0       	ldi	r21, 0x00	; 0
   char data = 0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0a c0       	rjmp	.+20     	; 0xda <rx_byte+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	95 e0       	ldi	r25, 0x05	; 5
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <rx_byte+0xa>
  cc:	00 00       	nop
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
	  {
		  _delay_us(1);
		  count++;
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
  d2:	28 3c       	cpi	r18, 0xC8	; 200
  d4:	31 05       	cpc	r19, r1
  d6:	19 f4       	brne	.+6      	; 0xde <rx_byte+0x20>
  d8:	26 c0       	rjmp	.+76     	; 0x126 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
   int count = 0;
   for(int i = 0; i < 8; i++)
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
  de:	1c 9b       	sbis	0x03, 4	; 3
  e0:	f2 cf       	rjmp	.-28     	; 0xc6 <rx_byte+0x8>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
  e2:	28 3c       	cpi	r18, 0xC8	; 200
  e4:	31 05       	cpc	r19, r1
  e6:	ec f4       	brge	.+58     	; 0x122 <rx_byte+0x64>
  e8:	90 ea       	ldi	r25, 0xA0	; 160
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <rx_byte+0x2c>
	  count = 0;
     
	  _delay_us(30); // high 26-28 us : data "0"  // 데이터 값이 1이면 30us 지나도 여전히 high 이기때문에
     
	  data = data << 1;      // RH_integral <<= 1;
  ee:	88 0f       	add	r24, r24
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
  f0:	1c 9b       	sbis	0x03, 4	; 3
  f2:	0c c0       	rjmp	.+24     	; 0x10c <rx_byte+0x4e>
      {
         data |= 0b00000001;
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	0a c0       	rjmp	.+20     	; 0x10c <rx_byte+0x4e>
  f8:	95 e0       	ldi	r25, 0x05	; 5
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <rx_byte+0x3c>
  fe:	00 00       	nop
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
	  {
		  _delay_us(1);
		  count++;
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
 104:	28 3c       	cpi	r18, 0xC8	; 200
 106:	31 05       	cpc	r19, r1
 108:	19 f4       	brne	.+6      	; 0x110 <rx_byte+0x52>
 10a:	0d c0       	rjmp	.+26     	; 0x126 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
      {
         data |= 0b00000001;
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
 110:	1c 99       	sbic	0x03, 4	; 3
 112:	f2 cf       	rjmp	.-28     	; 0xf8 <rx_byte+0x3a>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
 114:	28 3c       	cpi	r18, 0xC8	; 200
 116:	31 05       	cpc	r19, r1
 118:	24 f4       	brge	.+8      	; 0x122 <rx_byte+0x64>
 11a:	41 50       	subi	r20, 0x01	; 1
 11c:	51 09       	sbc	r21, r1

char rx_byte(void)
{
   char data = 0;
   int count = 0;
   for(int i = 0; i < 8; i++)
 11e:	e9 f6       	brne	.-70     	; 0xda <rx_byte+0x1c>
 120:	08 95       	ret
   {
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))); // low인동안 기다리기 // 50us
      while(DHT11_PIN & (1 << DHT11_PORT_num)); //data 값이 1인 경우(high) 시간 보내주기
   }
   */
   if(count >= 200) return 255;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	08 95       	ret
 126:	8f ef       	ldi	r24, 0xFF	; 255
   else return data;
}
 128:	08 95       	ret

0000012a <data_output>:

void data_output(void)//data 핀 아웃풋 설정
{
   //대기 상태로 만들어주기
   DHT11_DDR |= (1 << DHT11_PORT_num);   //출력 전환
 12a:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
 12c:	2c 9a       	sbi	0x05, 4	; 5
 12e:	08 95       	ret

00000130 <data_input>:
}

void data_input(void)
{
   //DHT11_PORT &= ~(1 << DHT11_PORT4); //내부 PULL UP 없이
   DHT11_DDR &= ~(1 << DHT11_PORT_num);  //입력 전환
 130:	24 98       	cbi	0x04, 4	; 4
 132:	08 95       	ret

00000134 <dumi_read>:
   return;
}

void dumi_read(void) //비트 읽고 흘려보내기
{
	while(DHT11_PIN & (1 << DHT11_PORT_num));  //4번 핀의 값이 1인 동안 기다리기
 134:	1c 99       	sbic	0x03, 4	; 3
 136:	fe cf       	rjmp	.-4      	; 0x134 <dumi_read>
	while(!(DHT11_PIN & (1 << DHT11_PORT_num))); // 0인 동안, low인동안 80 마이크로 s 기다리는거
 138:	1c 9b       	sbis	0x03, 4	; 3
 13a:	fe cf       	rjmp	.-4      	; 0x138 <dumi_read+0x4>
	while(DHT11_PIN & (1 << DHT11_PORT_num)); //1인 동안, high 인동안 80 마이크로s 기다리기
 13c:	1c 99       	sbic	0x03, 4	; 3
 13e:	fe cf       	rjmp	.-4      	; 0x13c <dumi_read+0x8>
	// => 버리는 신호들 , 대기/ 5.2 MCU Sends out Start Signal to DHT
	
	return;
}
 140:	08 95       	ret

00000142 <DHT11_trigger>:

void DHT11_trigger(void)
{
   DHT11_PORT &= ~(1 << DHT11_PORT_num); //Trigger신호 , low
 142:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	80 ee       	ldi	r24, 0xE0	; 224
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <DHT11_trigger+0x8>
 152:	00 c0       	rjmp	.+0      	; 0x154 <DHT11_trigger+0x12>
 154:	00 00       	nop
   
   _delay_ms(18);
   
   DHT11_PORT |= 1 << DHT11_PORT_num; //high
 156:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2a e1       	ldi	r18, 0x1A	; 26
 15a:	2a 95       	dec	r18
 15c:	f1 f7       	brne	.-4      	; 0x15a <DHT11_trigger+0x18>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <DHT11_trigger+0x1e>
 160:	08 95       	ret

00000162 <TemperInsertInit>:
		}
    }
}

void TemperInsertInit(void) {
	Timer0_init();
 162:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Timer0_init>
	UART0_init(9600);
 166:	60 e8       	ldi	r22, 0x80	; 128
 168:	75 e2       	ldi	r23, 0x25	; 37
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <UART0_init>
	DHT11_init();
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_init>
	sei();
 176:	78 94       	sei
	DDRB |= 1 << PORTB5;
 178:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~(1 << PORTB5);
 17a:	2d 98       	cbi	0x05, 5	; 5
 17c:	08 95       	ret

0000017e <check_DHT11>:
	return;
}



void check_DHT11() {
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	char RH_integral, RH_decimal, Tmpr_integral, Tmpr_decimal;
	
	
	DHT11_trigger(); //트리거
 186:	0e 94 a1 00 	call	0x142	; 0x142 <DHT11_trigger>
	
	data_input(); //입력 전환
 18a:	0e 94 98 00 	call	0x130	; 0x130 <data_input>
	
	dumi_read(); // 데이터 전송 전에 시간 흘려보내기
 18e:	0e 94 9a 00 	call	0x134	; 0x134 <dumi_read>
	
	
	RH_integral = rx_byte(); //데이터 값 저장
 192:	0e 94 5f 00 	call	0xbe	; 0xbe <rx_byte>
 196:	18 2f       	mov	r17, r24
	RH_decimal  = rx_byte();
 198:	0e 94 5f 00 	call	0xbe	; 0xbe <rx_byte>
 19c:	08 2f       	mov	r16, r24
	Tmpr_integral = rx_byte();
 19e:	0e 94 5f 00 	call	0xbe	; 0xbe <rx_byte>
 1a2:	c8 2f       	mov	r28, r24
	Tmpr_decimal = rx_byte();
 1a4:	0e 94 5f 00 	call	0xbe	; 0xbe <rx_byte>
 1a8:	d8 2f       	mov	r29, r24
	
	rx_byte(); //check_sum
 1aa:	0e 94 5f 00 	call	0xbe	; 0xbe <rx_byte>
	
	//DHT11_init();
	data_output(); // data pin 출력 전환
 1ae:	0e 94 95 00 	call	0x12a	; 0x12a <data_output>
	
	//printf("\n", );
	printf("time %d %d %d temper %d.%d humi %d.%d\n",hour, min, sec, Tmpr_integral, Tmpr_decimal, RH_integral, RH_decimal);
 1b2:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <sec>
 1b6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <min>
 1ba:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 1be:	1f 92       	push	r1
 1c0:	0f 93       	push	r16
 1c2:	1f 92       	push	r1
 1c4:	1f 93       	push	r17
 1c6:	1f 92       	push	r1
 1c8:	df 93       	push	r29
 1ca:	1f 92       	push	r1
 1cc:	cf 93       	push	r28
 1ce:	1f 92       	push	r1
 1d0:	2f 93       	push	r18
 1d2:	1f 92       	push	r1
 1d4:	9f 93       	push	r25
 1d6:	1f 92       	push	r1
 1d8:	8f 93       	push	r24
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	9f 93       	push	r25
 1e0:	8f 93       	push	r24
 1e2:	0e 94 87 02 	call	0x50e	; 0x50e <printf>
	//printf("\n", );
	
	// _delay_ms(1500); //적당한 시간을 주지않으면 초기화를 못해서 한번만 출력하고 안된당
	//delay_flag = 1;
	
	return;
 1e6:	8d b7       	in	r24, 0x3d	; 61
 1e8:	9e b7       	in	r25, 0x3e	; 62
 1ea:	40 96       	adiw	r24, 0x10	; 16
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	9e bf       	out	0x3e, r25	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	8d bf       	out	0x3d, r24	; 61
	
	
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <main>:
extern volatile int time_msec;

int main(void)
{
	//char cmd_idx = 0;
	TemperInsertInit();
 200:	0e 94 b1 00 	call	0x162	; 0x162 <TemperInsertInit>
    while (1) 
    {
		
		if(check_DHT11_flag) {
 204:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <check_DHT11_flag>
 208:	88 23       	and	r24, r24
 20a:	e1 f3       	breq	.-8      	; 0x204 <main+0x4>
			
			check_DHT11_flag = 0;
 20c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <check_DHT11_flag>
			check_DHT11();
 210:	0e 94 bf 00 	call	0x17e	; 0x17e <check_DHT11>
 214:	f7 cf       	rjmp	.-18     	; 0x204 <main+0x4>

00000216 <__vector_14>:

	
} 

int Timer_main(void)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <msec>
 22a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <msec+0x1>
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <msec+0x1>
 234:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <msec>
 238:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <time_msec>
 23c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <time_msec+0x1>
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <time_msec+0x1>
 246:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <time_msec>
 24a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <msec>
 24e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <msec+0x1>
 252:	8c 3d       	cpi	r24, 0xDC	; 220
 254:	95 40       	sbci	r25, 0x05	; 5
 256:	14 f0       	brlt	.+4      	; 0x25c <__vector_14+0x46>
 258:	2d 9a       	sbi	0x05, 5	; 5
 25a:	01 c0       	rjmp	.+2      	; 0x25e <__vector_14+0x48>
 25c:	2d 98       	cbi	0x05, 5	; 5
 25e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <msec>
 262:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <msec+0x1>
 266:	88 3b       	cpi	r24, 0xB8	; 184
 268:	9b 40       	sbci	r25, 0x0B	; 11
 26a:	3c f0       	brlt	.+14     	; 0x27a <__vector_14+0x64>
 26c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <msec+0x1>
 270:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <msec>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <check_DHT11_flag>
 27a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <time_msec>
 27e:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <time_msec+0x1>
 282:	88 3e       	cpi	r24, 0xE8	; 232
 284:	93 40       	sbci	r25, 0x03	; 3
 286:	fc f0       	brlt	.+62     	; 0x2c6 <__vector_14+0xb0>
 288:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <sec>
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <sec>
 292:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <time_msec+0x1>
 296:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <time_msec>
 29a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <sec>
 29e:	8c 33       	cpi	r24, 0x3C	; 60
 2a0:	90 f0       	brcs	.+36     	; 0x2c6 <__vector_14+0xb0>
 2a2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <min>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <min>
 2ac:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <sec>
 2b0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <min>
 2b4:	8c 33       	cpi	r24, 0x3C	; 60
 2b6:	38 f0       	brcs	.+14     	; 0x2c6 <__vector_14+0xb0>
 2b8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 2c2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <min>
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <Timer0_init>:
*/

void Timer0_init(void)
{
	//타이머 초기화
	TCCR0A |= 1 << WGM01;					//0b00000010;  //CTC Mode
 2d6:	84 b5       	in	r24, 0x24	; 36
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00 | 1 << CS01);		//0b00000011;  //64분주 사용(하위 3bit : 011)
 2dc:	85 b5       	in	r24, 0x25	; 37
 2de:	83 60       	ori	r24, 0x03	; 3
 2e0:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;							//비교할 값 => (16,000,000 / 64) / 1000 = 250 (0 ~ "249")			//1ms 주기
 2e2:	89 ef       	ldi	r24, 0xF9	; 249
 2e4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
 2e6:	ee e6       	ldi	r30, 0x6E	; 110
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	80 83       	st	Z, r24
 2f0:	08 95       	ret

000002f2 <TX0_char>:
//한 문자 송신 TX
void TX0_char(char data) //ascii
{
	//상태 읽기 / UCSR0A
	//UDRE0 : USART 데이터 레지스터가 비어있으면 1로 set / initial value : 1 
	while(!(UCSR0A & (1 << UDRE0))); //0b00100000 //0이면 기다려서 1이 될때까지 (준비가 될 때까지)
 2f2:	e0 ec       	ldi	r30, 0xC0	; 192
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	90 81       	ld	r25, Z
 2f8:	95 ff       	sbrs	r25, 5
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <TX0_char+0x4>
	
	UDR0 = data; //데이터 보낸 것
 2fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 300:	08 95       	ret

00000302 <__vector_18>:
	CR : \R 커서 맨 앞으로
	LF : \N 줄 바꿈
	=> ENTER
	터미널 프로그램마다 설정 다름
*/
ISR(USART_RX_vect) { /* USART Rx Complete */
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	2f 93       	push	r18
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	static char idx = 0, buf_idx = 0; //명령어 배열 index 제어 
	RX_data = UDR0;
 316:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 31a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RX_data>
	
	if(idx < BUFFER_MAX && RX_cmd_count <= COMMAND_MAX) {
 31e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <idx.2082>
 322:	82 33       	cpi	r24, 0x32	; 50
 324:	08 f0       	brcs	.+2      	; 0x328 <__vector_18+0x26>
 326:	40 c0       	rjmp	.+128    	; 0x3a8 <__vector_18+0xa6>
 328:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <RX_cmd_count>
 32c:	9b 30       	cpi	r25, 0x0B	; 11
 32e:	e0 f5       	brcc	.+120    	; 0x3a8 <__vector_18+0xa6>
		if(RX_data == '\r' || RX_data == '\n') { //명령이 들어옴
 330:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <RX_data>
 334:	9d 30       	cpi	r25, 0x0D	; 13
 336:	21 f0       	breq	.+8      	; 0x340 <__vector_18+0x3e>
 338:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <RX_data>
 33c:	9a 30       	cpi	r25, 0x0A	; 10
 33e:	19 f5       	brne	.+70     	; 0x386 <__vector_18+0x84>
			buffer[buf_idx][idx] = 0; //or '\0' //문자열의 마지막에 null 넣어주기
 340:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <buf_idx.2083>
 344:	22 e3       	ldi	r18, 0x32	; 50
 346:	92 9f       	mul	r25, r18
 348:	f0 01       	movw	r30, r0
 34a:	11 24       	eor	r1, r1
 34c:	e8 5c       	subi	r30, 0xC8	; 200
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	e8 0f       	add	r30, r24
 352:	f1 1d       	adc	r31, r1
 354:	10 82       	st	Z, r1
			idx = 0; //다음 명령어를 받기위한 clear
 356:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <idx.2082>
			RX_cmd_count++;
 35a:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <RX_cmd_count>
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <RX_cmd_count>
			
			buf_idx++;
			buf_idx = buf_idx % COMMAND_MAX;
 364:	9f 5f       	subi	r25, 0xFF	; 255
 366:	8d ec       	ldi	r24, 0xCD	; 205
 368:	98 9f       	mul	r25, r24
 36a:	81 2d       	mov	r24, r1
 36c:	11 24       	eor	r1, r1
 36e:	86 95       	lsr	r24
 370:	86 95       	lsr	r24
 372:	86 95       	lsr	r24
 374:	88 0f       	add	r24, r24
 376:	28 2f       	mov	r18, r24
 378:	22 0f       	add	r18, r18
 37a:	22 0f       	add	r18, r18
 37c:	82 0f       	add	r24, r18
 37e:	98 1b       	sub	r25, r24
 380:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <buf_idx.2083>
 384:	11 c0       	rjmp	.+34     	; 0x3a8 <__vector_18+0xa6>
		}
		else buffer[buf_idx][idx++] = RX_data;
 386:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <buf_idx.2083>
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	98 0f       	add	r25, r24
 38e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <idx.2082>
 392:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <RX_data>
 396:	22 e3       	ldi	r18, 0x32	; 50
 398:	e2 9f       	mul	r30, r18
 39a:	f0 01       	movw	r30, r0
 39c:	11 24       	eor	r1, r1
 39e:	e8 5c       	subi	r30, 0xC8	; 200
 3a0:	fe 4f       	sbci	r31, 0xFE	; 254
 3a2:	e8 0f       	add	r30, r24
 3a4:	f1 1d       	adc	r31, r1
 3a6:	90 83       	st	Z, r25
	}
	
	//TX0_char(RX_data);
	RX_flag = 1;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <RX_flag>
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <UART0_init>:
	
	return 0;
}

void UART0_init(unsigned long baud)
{
 3c2:	cf 92       	push	r12
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	6b 01       	movw	r12, r22
 3cc:	7c 01       	movw	r14, r24
	char i;
	FILE* fpStdio = fdevopen(TX0_char, NULL);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	89 e7       	ldi	r24, 0x79	; 121
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 3c 02 	call	0x478	; 0x478 <fdevopen>
	
	UCSR0B |= ((1 << RXCIE0) | (1<< RXEN0) | (1<< TXEN0));	//송신, 수신 , 수신 인터럽트 활성화
 3da:	e1 ec       	ldi	r30, 0xC1	; 193
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	88 69       	ori	r24, 0x98	; 152
 3e2:	80 83       	st	Z, r24
	/*
		//0b10011000; //bit7 : Rx complete interrupt enable, bit 4 : receiver enable , bit 3 : transmitter enable
		//7~2 bit 제어 레지스터 , 0~1 bit 데이터 레지스터
		//UCSZ 0~2 : char size / 2 -> UCSR0B , 0,1 -> UCSR0C / ASCII 8bit /9bit 통신 UCSR0B의 0, 1bit 사용(알아서된당)
	*/
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));				//8bit 통신
 3e4:	e2 ec       	ldi	r30, 0xC2	; 194
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	86 60       	ori	r24, 0x06	; 6
 3ec:	80 83       	st	Z, r24
	/*
		//UCSR0C
		//7,6bit 0 0 -> Asynchronous 
	*/
	UBRR0H = ((F_CPU/16/baud)-1) >> 8; //상위 8bit
 3ee:	60 e4       	ldi	r22, 0x40	; 64
 3f0:	72 e4       	ldi	r23, 0x42	; 66
 3f2:	8f e0       	ldi	r24, 0x0F	; 15
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	a7 01       	movw	r20, r14
 3f8:	96 01       	movw	r18, r12
 3fa:	0e 94 1a 02 	call	0x434	; 0x434 <__udivmodsi4>
 3fe:	da 01       	movw	r26, r20
 400:	c9 01       	movw	r24, r18
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	a1 09       	sbc	r26, r1
 406:	b1 09       	sbc	r27, r1
 408:	89 2f       	mov	r24, r25
 40a:	9a 2f       	mov	r25, r26
 40c:	ab 2f       	mov	r26, r27
 40e:	bb 27       	eor	r27, r27
 410:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  ((F_CPU/16/baud)-1) & 0xFF; //하위 8bit//0x00FF//0b0000000011111111 //상위 8bit는 자리가 없어서 &안해줘도 안들어감
 414:	21 50       	subi	r18, 0x01	; 1
 416:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*
		// 9600은 우리가 설정해준 속도
		//Asynchronous Normal mode(U2X0 = 0으로 설정했음)
		//UBRR0L(low), UBRR0H(high) : 보호 레이트 레지스터 , 송수신 속도 맞춰주는
	*/
	i = UDR0; //수신 버퍼 비우기 // 한번 읽으면 비워지기 때문에 읽어주는 것 
 41a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41e:	8f e9       	ldi	r24, 0x9F	; 159
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
			//송신, 수신 레지스터 이름을 같이 쓰는데 컴파일러가 알아서 구분해줌
	
	_delay_ms(1); //약간의 딜레이
	
	return;
}
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	08 95       	ret

00000434 <__udivmodsi4>:
 434:	a1 e2       	ldi	r26, 0x21	; 33
 436:	1a 2e       	mov	r1, r26
 438:	aa 1b       	sub	r26, r26
 43a:	bb 1b       	sub	r27, r27
 43c:	fd 01       	movw	r30, r26
 43e:	0d c0       	rjmp	.+26     	; 0x45a <__udivmodsi4_ep>

00000440 <__udivmodsi4_loop>:
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	ee 1f       	adc	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	a2 17       	cp	r26, r18
 44a:	b3 07       	cpc	r27, r19
 44c:	e4 07       	cpc	r30, r20
 44e:	f5 07       	cpc	r31, r21
 450:	20 f0       	brcs	.+8      	; 0x45a <__udivmodsi4_ep>
 452:	a2 1b       	sub	r26, r18
 454:	b3 0b       	sbc	r27, r19
 456:	e4 0b       	sbc	r30, r20
 458:	f5 0b       	sbc	r31, r21

0000045a <__udivmodsi4_ep>:
 45a:	66 1f       	adc	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	1a 94       	dec	r1
 464:	69 f7       	brne	.-38     	; 0x440 <__udivmodsi4_loop>
 466:	60 95       	com	r22
 468:	70 95       	com	r23
 46a:	80 95       	com	r24
 46c:	90 95       	com	r25
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	bd 01       	movw	r22, r26
 474:	cf 01       	movw	r24, r30
 476:	08 95       	ret

00000478 <fdevopen>:
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 97       	sbiw	r24, 0x00	; 0
 482:	31 f4       	brne	.+12     	; 0x490 <fdevopen+0x18>
 484:	61 15       	cp	r22, r1
 486:	71 05       	cpc	r23, r1
 488:	19 f4       	brne	.+6      	; 0x490 <fdevopen+0x18>
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	3a c0       	rjmp	.+116    	; 0x504 <fdevopen+0x8c>
 490:	8b 01       	movw	r16, r22
 492:	ec 01       	movw	r28, r24
 494:	6e e0       	ldi	r22, 0x0E	; 14
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <calloc>
 4a0:	fc 01       	movw	r30, r24
 4a2:	89 2b       	or	r24, r25
 4a4:	91 f3       	breq	.-28     	; 0x48a <fdevopen+0x12>
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	83 83       	std	Z+3, r24	; 0x03
 4aa:	01 15       	cp	r16, r1
 4ac:	11 05       	cpc	r17, r1
 4ae:	71 f0       	breq	.+28     	; 0x4cc <fdevopen+0x54>
 4b0:	13 87       	std	Z+11, r17	; 0x0b
 4b2:	02 87       	std	Z+10, r16	; 0x0a
 4b4:	81 e8       	ldi	r24, 0x81	; 129
 4b6:	83 83       	std	Z+3, r24	; 0x03
 4b8:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <__iob>
 4bc:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <__iob+0x1>
 4c0:	89 2b       	or	r24, r25
 4c2:	21 f4       	brne	.+8      	; 0x4cc <fdevopen+0x54>
 4c4:	f0 93 2f 03 	sts	0x032F, r31	; 0x80032f <__iob+0x1>
 4c8:	e0 93 2e 03 	sts	0x032E, r30	; 0x80032e <__iob>
 4cc:	20 97       	sbiw	r28, 0x00	; 0
 4ce:	c9 f0       	breq	.+50     	; 0x502 <fdevopen+0x8a>
 4d0:	d1 87       	std	Z+9, r29	; 0x09
 4d2:	c0 87       	std	Z+8, r28	; 0x08
 4d4:	83 81       	ldd	r24, Z+3	; 0x03
 4d6:	82 60       	ori	r24, 0x02	; 2
 4d8:	83 83       	std	Z+3, r24	; 0x03
 4da:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <__iob+0x2>
 4de:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <__iob+0x3>
 4e2:	89 2b       	or	r24, r25
 4e4:	71 f4       	brne	.+28     	; 0x502 <fdevopen+0x8a>
 4e6:	f0 93 31 03 	sts	0x0331, r31	; 0x800331 <__iob+0x3>
 4ea:	e0 93 30 03 	sts	0x0330, r30	; 0x800330 <__iob+0x2>
 4ee:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__iob+0x4>
 4f2:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <__iob+0x5>
 4f6:	89 2b       	or	r24, r25
 4f8:	21 f4       	brne	.+8      	; 0x502 <fdevopen+0x8a>
 4fa:	f0 93 33 03 	sts	0x0333, r31	; 0x800333 <__iob+0x5>
 4fe:	e0 93 32 03 	sts	0x0332, r30	; 0x800332 <__iob+0x4>
 502:	cf 01       	movw	r24, r30
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	08 95       	ret

0000050e <printf>:
 50e:	a0 e0       	ldi	r26, 0x00	; 0
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	ed e8       	ldi	r30, 0x8D	; 141
 514:	f2 e0       	ldi	r31, 0x02	; 2
 516:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__prologue_saves__+0x20>
 51a:	ae 01       	movw	r20, r28
 51c:	4b 5f       	subi	r20, 0xFB	; 251
 51e:	5f 4f       	sbci	r21, 0xFF	; 255
 520:	fa 01       	movw	r30, r20
 522:	61 91       	ld	r22, Z+
 524:	71 91       	ld	r23, Z+
 526:	af 01       	movw	r20, r30
 528:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <__iob+0x2>
 52c:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <__iob+0x3>
 530:	0e 94 9d 02 	call	0x53a	; 0x53a <vfprintf>
 534:	e2 e0       	ldi	r30, 0x02	; 2
 536:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__epilogue_restores__+0x20>

0000053a <vfprintf>:
 53a:	ab e0       	ldi	r26, 0x0B	; 11
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	e3 ea       	ldi	r30, 0xA3	; 163
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__prologue_saves__>
 546:	6c 01       	movw	r12, r24
 548:	7b 01       	movw	r14, r22
 54a:	8a 01       	movw	r16, r20
 54c:	fc 01       	movw	r30, r24
 54e:	17 82       	std	Z+7, r1	; 0x07
 550:	16 82       	std	Z+6, r1	; 0x06
 552:	83 81       	ldd	r24, Z+3	; 0x03
 554:	81 ff       	sbrs	r24, 1
 556:	cc c1       	rjmp	.+920    	; 0x8f0 <vfprintf+0x3b6>
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	3c 01       	movw	r6, r24
 55e:	f6 01       	movw	r30, r12
 560:	93 81       	ldd	r25, Z+3	; 0x03
 562:	f7 01       	movw	r30, r14
 564:	93 fd       	sbrc	r25, 3
 566:	85 91       	lpm	r24, Z+
 568:	93 ff       	sbrs	r25, 3
 56a:	81 91       	ld	r24, Z+
 56c:	7f 01       	movw	r14, r30
 56e:	88 23       	and	r24, r24
 570:	09 f4       	brne	.+2      	; 0x574 <vfprintf+0x3a>
 572:	ba c1       	rjmp	.+884    	; 0x8e8 <vfprintf+0x3ae>
 574:	85 32       	cpi	r24, 0x25	; 37
 576:	39 f4       	brne	.+14     	; 0x586 <vfprintf+0x4c>
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	7f 01       	movw	r14, r30
 582:	85 32       	cpi	r24, 0x25	; 37
 584:	29 f4       	brne	.+10     	; 0x590 <vfprintf+0x56>
 586:	b6 01       	movw	r22, r12
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 58e:	e7 cf       	rjmp	.-50     	; 0x55e <vfprintf+0x24>
 590:	91 2c       	mov	r9, r1
 592:	21 2c       	mov	r2, r1
 594:	31 2c       	mov	r3, r1
 596:	ff e1       	ldi	r31, 0x1F	; 31
 598:	f3 15       	cp	r31, r3
 59a:	d8 f0       	brcs	.+54     	; 0x5d2 <vfprintf+0x98>
 59c:	8b 32       	cpi	r24, 0x2B	; 43
 59e:	79 f0       	breq	.+30     	; 0x5be <vfprintf+0x84>
 5a0:	38 f4       	brcc	.+14     	; 0x5b0 <vfprintf+0x76>
 5a2:	80 32       	cpi	r24, 0x20	; 32
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <vfprintf+0x8a>
 5a6:	83 32       	cpi	r24, 0x23	; 35
 5a8:	a1 f4       	brne	.+40     	; 0x5d2 <vfprintf+0x98>
 5aa:	23 2d       	mov	r18, r3
 5ac:	20 61       	ori	r18, 0x10	; 16
 5ae:	1d c0       	rjmp	.+58     	; 0x5ea <vfprintf+0xb0>
 5b0:	8d 32       	cpi	r24, 0x2D	; 45
 5b2:	61 f0       	breq	.+24     	; 0x5cc <vfprintf+0x92>
 5b4:	80 33       	cpi	r24, 0x30	; 48
 5b6:	69 f4       	brne	.+26     	; 0x5d2 <vfprintf+0x98>
 5b8:	23 2d       	mov	r18, r3
 5ba:	21 60       	ori	r18, 0x01	; 1
 5bc:	16 c0       	rjmp	.+44     	; 0x5ea <vfprintf+0xb0>
 5be:	83 2d       	mov	r24, r3
 5c0:	82 60       	ori	r24, 0x02	; 2
 5c2:	38 2e       	mov	r3, r24
 5c4:	e3 2d       	mov	r30, r3
 5c6:	e4 60       	ori	r30, 0x04	; 4
 5c8:	3e 2e       	mov	r3, r30
 5ca:	2a c0       	rjmp	.+84     	; 0x620 <vfprintf+0xe6>
 5cc:	f3 2d       	mov	r31, r3
 5ce:	f8 60       	ori	r31, 0x08	; 8
 5d0:	1d c0       	rjmp	.+58     	; 0x60c <vfprintf+0xd2>
 5d2:	37 fc       	sbrc	r3, 7
 5d4:	2d c0       	rjmp	.+90     	; 0x630 <vfprintf+0xf6>
 5d6:	20 ed       	ldi	r18, 0xD0	; 208
 5d8:	28 0f       	add	r18, r24
 5da:	2a 30       	cpi	r18, 0x0A	; 10
 5dc:	40 f0       	brcs	.+16     	; 0x5ee <vfprintf+0xb4>
 5de:	8e 32       	cpi	r24, 0x2E	; 46
 5e0:	b9 f4       	brne	.+46     	; 0x610 <vfprintf+0xd6>
 5e2:	36 fc       	sbrc	r3, 6
 5e4:	81 c1       	rjmp	.+770    	; 0x8e8 <vfprintf+0x3ae>
 5e6:	23 2d       	mov	r18, r3
 5e8:	20 64       	ori	r18, 0x40	; 64
 5ea:	32 2e       	mov	r3, r18
 5ec:	19 c0       	rjmp	.+50     	; 0x620 <vfprintf+0xe6>
 5ee:	36 fe       	sbrs	r3, 6
 5f0:	06 c0       	rjmp	.+12     	; 0x5fe <vfprintf+0xc4>
 5f2:	8a e0       	ldi	r24, 0x0A	; 10
 5f4:	98 9e       	mul	r9, r24
 5f6:	20 0d       	add	r18, r0
 5f8:	11 24       	eor	r1, r1
 5fa:	92 2e       	mov	r9, r18
 5fc:	11 c0       	rjmp	.+34     	; 0x620 <vfprintf+0xe6>
 5fe:	ea e0       	ldi	r30, 0x0A	; 10
 600:	2e 9e       	mul	r2, r30
 602:	20 0d       	add	r18, r0
 604:	11 24       	eor	r1, r1
 606:	22 2e       	mov	r2, r18
 608:	f3 2d       	mov	r31, r3
 60a:	f0 62       	ori	r31, 0x20	; 32
 60c:	3f 2e       	mov	r3, r31
 60e:	08 c0       	rjmp	.+16     	; 0x620 <vfprintf+0xe6>
 610:	8c 36       	cpi	r24, 0x6C	; 108
 612:	21 f4       	brne	.+8      	; 0x61c <vfprintf+0xe2>
 614:	83 2d       	mov	r24, r3
 616:	80 68       	ori	r24, 0x80	; 128
 618:	38 2e       	mov	r3, r24
 61a:	02 c0       	rjmp	.+4      	; 0x620 <vfprintf+0xe6>
 61c:	88 36       	cpi	r24, 0x68	; 104
 61e:	41 f4       	brne	.+16     	; 0x630 <vfprintf+0xf6>
 620:	f7 01       	movw	r30, r14
 622:	93 fd       	sbrc	r25, 3
 624:	85 91       	lpm	r24, Z+
 626:	93 ff       	sbrs	r25, 3
 628:	81 91       	ld	r24, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	81 11       	cpse	r24, r1
 62e:	b3 cf       	rjmp	.-154    	; 0x596 <vfprintf+0x5c>
 630:	98 2f       	mov	r25, r24
 632:	9f 7d       	andi	r25, 0xDF	; 223
 634:	95 54       	subi	r25, 0x45	; 69
 636:	93 30       	cpi	r25, 0x03	; 3
 638:	28 f4       	brcc	.+10     	; 0x644 <vfprintf+0x10a>
 63a:	0c 5f       	subi	r16, 0xFC	; 252
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	9f e3       	ldi	r25, 0x3F	; 63
 640:	99 83       	std	Y+1, r25	; 0x01
 642:	0d c0       	rjmp	.+26     	; 0x65e <vfprintf+0x124>
 644:	83 36       	cpi	r24, 0x63	; 99
 646:	31 f0       	breq	.+12     	; 0x654 <vfprintf+0x11a>
 648:	83 37       	cpi	r24, 0x73	; 115
 64a:	71 f0       	breq	.+28     	; 0x668 <vfprintf+0x12e>
 64c:	83 35       	cpi	r24, 0x53	; 83
 64e:	09 f0       	breq	.+2      	; 0x652 <vfprintf+0x118>
 650:	59 c0       	rjmp	.+178    	; 0x704 <vfprintf+0x1ca>
 652:	21 c0       	rjmp	.+66     	; 0x696 <vfprintf+0x15c>
 654:	f8 01       	movw	r30, r16
 656:	80 81       	ld	r24, Z
 658:	89 83       	std	Y+1, r24	; 0x01
 65a:	0e 5f       	subi	r16, 0xFE	; 254
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	88 24       	eor	r8, r8
 660:	83 94       	inc	r8
 662:	91 2c       	mov	r9, r1
 664:	53 01       	movw	r10, r6
 666:	13 c0       	rjmp	.+38     	; 0x68e <vfprintf+0x154>
 668:	28 01       	movw	r4, r16
 66a:	f2 e0       	ldi	r31, 0x02	; 2
 66c:	4f 0e       	add	r4, r31
 66e:	51 1c       	adc	r5, r1
 670:	f8 01       	movw	r30, r16
 672:	a0 80       	ld	r10, Z
 674:	b1 80       	ldd	r11, Z+1	; 0x01
 676:	36 fe       	sbrs	r3, 6
 678:	03 c0       	rjmp	.+6      	; 0x680 <vfprintf+0x146>
 67a:	69 2d       	mov	r22, r9
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <vfprintf+0x14a>
 680:	6f ef       	ldi	r22, 0xFF	; 255
 682:	7f ef       	ldi	r23, 0xFF	; 255
 684:	c5 01       	movw	r24, r10
 686:	0e 94 cd 05 	call	0xb9a	; 0xb9a <strnlen>
 68a:	4c 01       	movw	r8, r24
 68c:	82 01       	movw	r16, r4
 68e:	f3 2d       	mov	r31, r3
 690:	ff 77       	andi	r31, 0x7F	; 127
 692:	3f 2e       	mov	r3, r31
 694:	16 c0       	rjmp	.+44     	; 0x6c2 <vfprintf+0x188>
 696:	28 01       	movw	r4, r16
 698:	22 e0       	ldi	r18, 0x02	; 2
 69a:	42 0e       	add	r4, r18
 69c:	51 1c       	adc	r5, r1
 69e:	f8 01       	movw	r30, r16
 6a0:	a0 80       	ld	r10, Z
 6a2:	b1 80       	ldd	r11, Z+1	; 0x01
 6a4:	36 fe       	sbrs	r3, 6
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <vfprintf+0x174>
 6a8:	69 2d       	mov	r22, r9
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <vfprintf+0x178>
 6ae:	6f ef       	ldi	r22, 0xFF	; 255
 6b0:	7f ef       	ldi	r23, 0xFF	; 255
 6b2:	c5 01       	movw	r24, r10
 6b4:	0e 94 bb 05 	call	0xb76	; 0xb76 <strnlen_P>
 6b8:	4c 01       	movw	r8, r24
 6ba:	f3 2d       	mov	r31, r3
 6bc:	f0 68       	ori	r31, 0x80	; 128
 6be:	3f 2e       	mov	r3, r31
 6c0:	82 01       	movw	r16, r4
 6c2:	33 fc       	sbrc	r3, 3
 6c4:	1b c0       	rjmp	.+54     	; 0x6fc <vfprintf+0x1c2>
 6c6:	82 2d       	mov	r24, r2
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	88 16       	cp	r8, r24
 6cc:	99 06       	cpc	r9, r25
 6ce:	b0 f4       	brcc	.+44     	; 0x6fc <vfprintf+0x1c2>
 6d0:	b6 01       	movw	r22, r12
 6d2:	80 e2       	ldi	r24, 0x20	; 32
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 6da:	2a 94       	dec	r2
 6dc:	f4 cf       	rjmp	.-24     	; 0x6c6 <vfprintf+0x18c>
 6de:	f5 01       	movw	r30, r10
 6e0:	37 fc       	sbrc	r3, 7
 6e2:	85 91       	lpm	r24, Z+
 6e4:	37 fe       	sbrs	r3, 7
 6e6:	81 91       	ld	r24, Z+
 6e8:	5f 01       	movw	r10, r30
 6ea:	b6 01       	movw	r22, r12
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 6f2:	21 10       	cpse	r2, r1
 6f4:	2a 94       	dec	r2
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	82 1a       	sub	r8, r18
 6fa:	91 08       	sbc	r9, r1
 6fc:	81 14       	cp	r8, r1
 6fe:	91 04       	cpc	r9, r1
 700:	71 f7       	brne	.-36     	; 0x6de <vfprintf+0x1a4>
 702:	e8 c0       	rjmp	.+464    	; 0x8d4 <vfprintf+0x39a>
 704:	84 36       	cpi	r24, 0x64	; 100
 706:	11 f0       	breq	.+4      	; 0x70c <vfprintf+0x1d2>
 708:	89 36       	cpi	r24, 0x69	; 105
 70a:	41 f5       	brne	.+80     	; 0x75c <vfprintf+0x222>
 70c:	f8 01       	movw	r30, r16
 70e:	37 fe       	sbrs	r3, 7
 710:	07 c0       	rjmp	.+14     	; 0x720 <vfprintf+0x1e6>
 712:	60 81       	ld	r22, Z
 714:	71 81       	ldd	r23, Z+1	; 0x01
 716:	82 81       	ldd	r24, Z+2	; 0x02
 718:	93 81       	ldd	r25, Z+3	; 0x03
 71a:	0c 5f       	subi	r16, 0xFC	; 252
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	08 c0       	rjmp	.+16     	; 0x730 <vfprintf+0x1f6>
 720:	60 81       	ld	r22, Z
 722:	71 81       	ldd	r23, Z+1	; 0x01
 724:	07 2e       	mov	r0, r23
 726:	00 0c       	add	r0, r0
 728:	88 0b       	sbc	r24, r24
 72a:	99 0b       	sbc	r25, r25
 72c:	0e 5f       	subi	r16, 0xFE	; 254
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	f3 2d       	mov	r31, r3
 732:	ff 76       	andi	r31, 0x6F	; 111
 734:	3f 2e       	mov	r3, r31
 736:	97 ff       	sbrs	r25, 7
 738:	09 c0       	rjmp	.+18     	; 0x74c <vfprintf+0x212>
 73a:	90 95       	com	r25
 73c:	80 95       	com	r24
 73e:	70 95       	com	r23
 740:	61 95       	neg	r22
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	f0 68       	ori	r31, 0x80	; 128
 74a:	3f 2e       	mov	r3, r31
 74c:	2a e0       	ldi	r18, 0x0A	; 10
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	a3 01       	movw	r20, r6
 752:	0e 94 14 06 	call	0xc28	; 0xc28 <__ultoa_invert>
 756:	88 2e       	mov	r8, r24
 758:	86 18       	sub	r8, r6
 75a:	45 c0       	rjmp	.+138    	; 0x7e6 <vfprintf+0x2ac>
 75c:	85 37       	cpi	r24, 0x75	; 117
 75e:	31 f4       	brne	.+12     	; 0x76c <vfprintf+0x232>
 760:	23 2d       	mov	r18, r3
 762:	2f 7e       	andi	r18, 0xEF	; 239
 764:	b2 2e       	mov	r11, r18
 766:	2a e0       	ldi	r18, 0x0A	; 10
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	25 c0       	rjmp	.+74     	; 0x7b6 <vfprintf+0x27c>
 76c:	93 2d       	mov	r25, r3
 76e:	99 7f       	andi	r25, 0xF9	; 249
 770:	b9 2e       	mov	r11, r25
 772:	8f 36       	cpi	r24, 0x6F	; 111
 774:	c1 f0       	breq	.+48     	; 0x7a6 <vfprintf+0x26c>
 776:	18 f4       	brcc	.+6      	; 0x77e <vfprintf+0x244>
 778:	88 35       	cpi	r24, 0x58	; 88
 77a:	79 f0       	breq	.+30     	; 0x79a <vfprintf+0x260>
 77c:	b5 c0       	rjmp	.+362    	; 0x8e8 <vfprintf+0x3ae>
 77e:	80 37       	cpi	r24, 0x70	; 112
 780:	19 f0       	breq	.+6      	; 0x788 <vfprintf+0x24e>
 782:	88 37       	cpi	r24, 0x78	; 120
 784:	21 f0       	breq	.+8      	; 0x78e <vfprintf+0x254>
 786:	b0 c0       	rjmp	.+352    	; 0x8e8 <vfprintf+0x3ae>
 788:	e9 2f       	mov	r30, r25
 78a:	e0 61       	ori	r30, 0x10	; 16
 78c:	be 2e       	mov	r11, r30
 78e:	b4 fe       	sbrs	r11, 4
 790:	0d c0       	rjmp	.+26     	; 0x7ac <vfprintf+0x272>
 792:	fb 2d       	mov	r31, r11
 794:	f4 60       	ori	r31, 0x04	; 4
 796:	bf 2e       	mov	r11, r31
 798:	09 c0       	rjmp	.+18     	; 0x7ac <vfprintf+0x272>
 79a:	34 fe       	sbrs	r3, 4
 79c:	0a c0       	rjmp	.+20     	; 0x7b2 <vfprintf+0x278>
 79e:	29 2f       	mov	r18, r25
 7a0:	26 60       	ori	r18, 0x06	; 6
 7a2:	b2 2e       	mov	r11, r18
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <vfprintf+0x278>
 7a6:	28 e0       	ldi	r18, 0x08	; 8
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <vfprintf+0x27c>
 7ac:	20 e1       	ldi	r18, 0x10	; 16
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x27c>
 7b2:	20 e1       	ldi	r18, 0x10	; 16
 7b4:	32 e0       	ldi	r19, 0x02	; 2
 7b6:	f8 01       	movw	r30, r16
 7b8:	b7 fe       	sbrs	r11, 7
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <vfprintf+0x290>
 7bc:	60 81       	ld	r22, Z
 7be:	71 81       	ldd	r23, Z+1	; 0x01
 7c0:	82 81       	ldd	r24, Z+2	; 0x02
 7c2:	93 81       	ldd	r25, Z+3	; 0x03
 7c4:	0c 5f       	subi	r16, 0xFC	; 252
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <vfprintf+0x29c>
 7ca:	60 81       	ld	r22, Z
 7cc:	71 81       	ldd	r23, Z+1	; 0x01
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 5f       	subi	r16, 0xFE	; 254
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	a3 01       	movw	r20, r6
 7d8:	0e 94 14 06 	call	0xc28	; 0xc28 <__ultoa_invert>
 7dc:	88 2e       	mov	r8, r24
 7de:	86 18       	sub	r8, r6
 7e0:	fb 2d       	mov	r31, r11
 7e2:	ff 77       	andi	r31, 0x7F	; 127
 7e4:	3f 2e       	mov	r3, r31
 7e6:	36 fe       	sbrs	r3, 6
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <vfprintf+0x2ca>
 7ea:	23 2d       	mov	r18, r3
 7ec:	2e 7f       	andi	r18, 0xFE	; 254
 7ee:	a2 2e       	mov	r10, r18
 7f0:	89 14       	cp	r8, r9
 7f2:	58 f4       	brcc	.+22     	; 0x80a <vfprintf+0x2d0>
 7f4:	34 fe       	sbrs	r3, 4
 7f6:	0b c0       	rjmp	.+22     	; 0x80e <vfprintf+0x2d4>
 7f8:	32 fc       	sbrc	r3, 2
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <vfprintf+0x2d4>
 7fc:	83 2d       	mov	r24, r3
 7fe:	8e 7e       	andi	r24, 0xEE	; 238
 800:	a8 2e       	mov	r10, r24
 802:	05 c0       	rjmp	.+10     	; 0x80e <vfprintf+0x2d4>
 804:	b8 2c       	mov	r11, r8
 806:	a3 2c       	mov	r10, r3
 808:	03 c0       	rjmp	.+6      	; 0x810 <vfprintf+0x2d6>
 80a:	b8 2c       	mov	r11, r8
 80c:	01 c0       	rjmp	.+2      	; 0x810 <vfprintf+0x2d6>
 80e:	b9 2c       	mov	r11, r9
 810:	a4 fe       	sbrs	r10, 4
 812:	0f c0       	rjmp	.+30     	; 0x832 <vfprintf+0x2f8>
 814:	fe 01       	movw	r30, r28
 816:	e8 0d       	add	r30, r8
 818:	f1 1d       	adc	r31, r1
 81a:	80 81       	ld	r24, Z
 81c:	80 33       	cpi	r24, 0x30	; 48
 81e:	21 f4       	brne	.+8      	; 0x828 <vfprintf+0x2ee>
 820:	9a 2d       	mov	r25, r10
 822:	99 7e       	andi	r25, 0xE9	; 233
 824:	a9 2e       	mov	r10, r25
 826:	09 c0       	rjmp	.+18     	; 0x83a <vfprintf+0x300>
 828:	a2 fe       	sbrs	r10, 2
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0x2fe>
 82c:	b3 94       	inc	r11
 82e:	b3 94       	inc	r11
 830:	04 c0       	rjmp	.+8      	; 0x83a <vfprintf+0x300>
 832:	8a 2d       	mov	r24, r10
 834:	86 78       	andi	r24, 0x86	; 134
 836:	09 f0       	breq	.+2      	; 0x83a <vfprintf+0x300>
 838:	b3 94       	inc	r11
 83a:	a3 fc       	sbrc	r10, 3
 83c:	11 c0       	rjmp	.+34     	; 0x860 <vfprintf+0x326>
 83e:	a0 fe       	sbrs	r10, 0
 840:	06 c0       	rjmp	.+12     	; 0x84e <vfprintf+0x314>
 842:	b2 14       	cp	r11, r2
 844:	88 f4       	brcc	.+34     	; 0x868 <vfprintf+0x32e>
 846:	28 0c       	add	r2, r8
 848:	92 2c       	mov	r9, r2
 84a:	9b 18       	sub	r9, r11
 84c:	0e c0       	rjmp	.+28     	; 0x86a <vfprintf+0x330>
 84e:	b2 14       	cp	r11, r2
 850:	60 f4       	brcc	.+24     	; 0x86a <vfprintf+0x330>
 852:	b6 01       	movw	r22, r12
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 85c:	b3 94       	inc	r11
 85e:	f7 cf       	rjmp	.-18     	; 0x84e <vfprintf+0x314>
 860:	b2 14       	cp	r11, r2
 862:	18 f4       	brcc	.+6      	; 0x86a <vfprintf+0x330>
 864:	2b 18       	sub	r2, r11
 866:	02 c0       	rjmp	.+4      	; 0x86c <vfprintf+0x332>
 868:	98 2c       	mov	r9, r8
 86a:	21 2c       	mov	r2, r1
 86c:	a4 fe       	sbrs	r10, 4
 86e:	10 c0       	rjmp	.+32     	; 0x890 <vfprintf+0x356>
 870:	b6 01       	movw	r22, r12
 872:	80 e3       	ldi	r24, 0x30	; 48
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 87a:	a2 fe       	sbrs	r10, 2
 87c:	17 c0       	rjmp	.+46     	; 0x8ac <vfprintf+0x372>
 87e:	a1 fc       	sbrc	r10, 1
 880:	03 c0       	rjmp	.+6      	; 0x888 <vfprintf+0x34e>
 882:	88 e7       	ldi	r24, 0x78	; 120
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <vfprintf+0x352>
 888:	88 e5       	ldi	r24, 0x58	; 88
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	b6 01       	movw	r22, r12
 88e:	0c c0       	rjmp	.+24     	; 0x8a8 <vfprintf+0x36e>
 890:	8a 2d       	mov	r24, r10
 892:	86 78       	andi	r24, 0x86	; 134
 894:	59 f0       	breq	.+22     	; 0x8ac <vfprintf+0x372>
 896:	a1 fe       	sbrs	r10, 1
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x364>
 89a:	8b e2       	ldi	r24, 0x2B	; 43
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <vfprintf+0x366>
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	a7 fc       	sbrc	r10, 7
 8a2:	8d e2       	ldi	r24, 0x2D	; 45
 8a4:	b6 01       	movw	r22, r12
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 8ac:	89 14       	cp	r8, r9
 8ae:	38 f4       	brcc	.+14     	; 0x8be <vfprintf+0x384>
 8b0:	b6 01       	movw	r22, r12
 8b2:	80 e3       	ldi	r24, 0x30	; 48
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 8ba:	9a 94       	dec	r9
 8bc:	f7 cf       	rjmp	.-18     	; 0x8ac <vfprintf+0x372>
 8be:	8a 94       	dec	r8
 8c0:	f3 01       	movw	r30, r6
 8c2:	e8 0d       	add	r30, r8
 8c4:	f1 1d       	adc	r31, r1
 8c6:	80 81       	ld	r24, Z
 8c8:	b6 01       	movw	r22, r12
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 8d0:	81 10       	cpse	r8, r1
 8d2:	f5 cf       	rjmp	.-22     	; 0x8be <vfprintf+0x384>
 8d4:	22 20       	and	r2, r2
 8d6:	09 f4       	brne	.+2      	; 0x8da <vfprintf+0x3a0>
 8d8:	42 ce       	rjmp	.-892    	; 0x55e <vfprintf+0x24>
 8da:	b6 01       	movw	r22, r12
 8dc:	80 e2       	ldi	r24, 0x20	; 32
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 8e4:	2a 94       	dec	r2
 8e6:	f6 cf       	rjmp	.-20     	; 0x8d4 <vfprintf+0x39a>
 8e8:	f6 01       	movw	r30, r12
 8ea:	86 81       	ldd	r24, Z+6	; 0x06
 8ec:	97 81       	ldd	r25, Z+7	; 0x07
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <vfprintf+0x3ba>
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	9f ef       	ldi	r25, 0xFF	; 255
 8f4:	2b 96       	adiw	r28, 0x0b	; 11
 8f6:	e2 e1       	ldi	r30, 0x12	; 18
 8f8:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__epilogue_restores__>

000008fc <calloc>:
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	86 9f       	mul	r24, r22
 906:	80 01       	movw	r16, r0
 908:	87 9f       	mul	r24, r23
 90a:	10 0d       	add	r17, r0
 90c:	96 9f       	mul	r25, r22
 90e:	10 0d       	add	r17, r0
 910:	11 24       	eor	r1, r1
 912:	c8 01       	movw	r24, r16
 914:	0e 94 9a 04 	call	0x934	; 0x934 <malloc>
 918:	ec 01       	movw	r28, r24
 91a:	00 97       	sbiw	r24, 0x00	; 0
 91c:	29 f0       	breq	.+10     	; 0x928 <__stack+0x29>
 91e:	a8 01       	movw	r20, r16
 920:	60 e0       	ldi	r22, 0x00	; 0
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	0e 94 c6 05 	call	0xb8c	; 0xb8c <memset>
 928:	ce 01       	movw	r24, r28
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <malloc>:
 934:	0f 93       	push	r16
 936:	1f 93       	push	r17
 938:	cf 93       	push	r28
 93a:	df 93       	push	r29
 93c:	82 30       	cpi	r24, 0x02	; 2
 93e:	91 05       	cpc	r25, r1
 940:	10 f4       	brcc	.+4      	; 0x946 <malloc+0x12>
 942:	82 e0       	ldi	r24, 0x02	; 2
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <__flp>
 94a:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <__flp+0x1>
 94e:	20 e0       	ldi	r18, 0x00	; 0
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	a0 e0       	ldi	r26, 0x00	; 0
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	30 97       	sbiw	r30, 0x00	; 0
 958:	19 f1       	breq	.+70     	; 0x9a0 <malloc+0x6c>
 95a:	40 81       	ld	r20, Z
 95c:	51 81       	ldd	r21, Z+1	; 0x01
 95e:	02 81       	ldd	r16, Z+2	; 0x02
 960:	13 81       	ldd	r17, Z+3	; 0x03
 962:	48 17       	cp	r20, r24
 964:	59 07       	cpc	r21, r25
 966:	c8 f0       	brcs	.+50     	; 0x99a <malloc+0x66>
 968:	84 17       	cp	r24, r20
 96a:	95 07       	cpc	r25, r21
 96c:	69 f4       	brne	.+26     	; 0x988 <malloc+0x54>
 96e:	10 97       	sbiw	r26, 0x00	; 0
 970:	31 f0       	breq	.+12     	; 0x97e <malloc+0x4a>
 972:	12 96       	adiw	r26, 0x02	; 2
 974:	0c 93       	st	X, r16
 976:	12 97       	sbiw	r26, 0x02	; 2
 978:	13 96       	adiw	r26, 0x03	; 3
 97a:	1c 93       	st	X, r17
 97c:	27 c0       	rjmp	.+78     	; 0x9cc <malloc+0x98>
 97e:	00 93 36 03 	sts	0x0336, r16	; 0x800336 <__flp>
 982:	10 93 37 03 	sts	0x0337, r17	; 0x800337 <__flp+0x1>
 986:	22 c0       	rjmp	.+68     	; 0x9cc <malloc+0x98>
 988:	21 15       	cp	r18, r1
 98a:	31 05       	cpc	r19, r1
 98c:	19 f0       	breq	.+6      	; 0x994 <malloc+0x60>
 98e:	42 17       	cp	r20, r18
 990:	53 07       	cpc	r21, r19
 992:	18 f4       	brcc	.+6      	; 0x99a <malloc+0x66>
 994:	9a 01       	movw	r18, r20
 996:	bd 01       	movw	r22, r26
 998:	ef 01       	movw	r28, r30
 99a:	df 01       	movw	r26, r30
 99c:	f8 01       	movw	r30, r16
 99e:	db cf       	rjmp	.-74     	; 0x956 <malloc+0x22>
 9a0:	21 15       	cp	r18, r1
 9a2:	31 05       	cpc	r19, r1
 9a4:	f9 f0       	breq	.+62     	; 0x9e4 <malloc+0xb0>
 9a6:	28 1b       	sub	r18, r24
 9a8:	39 0b       	sbc	r19, r25
 9aa:	24 30       	cpi	r18, 0x04	; 4
 9ac:	31 05       	cpc	r19, r1
 9ae:	80 f4       	brcc	.+32     	; 0x9d0 <malloc+0x9c>
 9b0:	8a 81       	ldd	r24, Y+2	; 0x02
 9b2:	9b 81       	ldd	r25, Y+3	; 0x03
 9b4:	61 15       	cp	r22, r1
 9b6:	71 05       	cpc	r23, r1
 9b8:	21 f0       	breq	.+8      	; 0x9c2 <malloc+0x8e>
 9ba:	fb 01       	movw	r30, r22
 9bc:	93 83       	std	Z+3, r25	; 0x03
 9be:	82 83       	std	Z+2, r24	; 0x02
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <malloc+0x96>
 9c2:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <__flp+0x1>
 9c6:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <__flp>
 9ca:	fe 01       	movw	r30, r28
 9cc:	32 96       	adiw	r30, 0x02	; 2
 9ce:	44 c0       	rjmp	.+136    	; 0xa58 <malloc+0x124>
 9d0:	fe 01       	movw	r30, r28
 9d2:	e2 0f       	add	r30, r18
 9d4:	f3 1f       	adc	r31, r19
 9d6:	81 93       	st	Z+, r24
 9d8:	91 93       	st	Z+, r25
 9da:	22 50       	subi	r18, 0x02	; 2
 9dc:	31 09       	sbc	r19, r1
 9de:	39 83       	std	Y+1, r19	; 0x01
 9e0:	28 83       	st	Y, r18
 9e2:	3a c0       	rjmp	.+116    	; 0xa58 <malloc+0x124>
 9e4:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <__brkval>
 9e8:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <__brkval+0x1>
 9ec:	23 2b       	or	r18, r19
 9ee:	41 f4       	brne	.+16     	; 0xa00 <malloc+0xcc>
 9f0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 9f4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 9f8:	30 93 35 03 	sts	0x0335, r19	; 0x800335 <__brkval+0x1>
 9fc:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <__brkval>
 a00:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a04:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a08:	21 15       	cp	r18, r1
 a0a:	31 05       	cpc	r19, r1
 a0c:	41 f4       	brne	.+16     	; 0xa1e <malloc+0xea>
 a0e:	2d b7       	in	r18, 0x3d	; 61
 a10:	3e b7       	in	r19, 0x3e	; 62
 a12:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a16:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a1a:	24 1b       	sub	r18, r20
 a1c:	35 0b       	sbc	r19, r21
 a1e:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <__brkval>
 a22:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <__brkval+0x1>
 a26:	e2 17       	cp	r30, r18
 a28:	f3 07       	cpc	r31, r19
 a2a:	a0 f4       	brcc	.+40     	; 0xa54 <malloc+0x120>
 a2c:	2e 1b       	sub	r18, r30
 a2e:	3f 0b       	sbc	r19, r31
 a30:	28 17       	cp	r18, r24
 a32:	39 07       	cpc	r19, r25
 a34:	78 f0       	brcs	.+30     	; 0xa54 <malloc+0x120>
 a36:	ac 01       	movw	r20, r24
 a38:	4e 5f       	subi	r20, 0xFE	; 254
 a3a:	5f 4f       	sbci	r21, 0xFF	; 255
 a3c:	24 17       	cp	r18, r20
 a3e:	35 07       	cpc	r19, r21
 a40:	48 f0       	brcs	.+18     	; 0xa54 <malloc+0x120>
 a42:	4e 0f       	add	r20, r30
 a44:	5f 1f       	adc	r21, r31
 a46:	50 93 35 03 	sts	0x0335, r21	; 0x800335 <__brkval+0x1>
 a4a:	40 93 34 03 	sts	0x0334, r20	; 0x800334 <__brkval>
 a4e:	81 93       	st	Z+, r24
 a50:	91 93       	st	Z+, r25
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <malloc+0x124>
 a54:	e0 e0       	ldi	r30, 0x00	; 0
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	cf 01       	movw	r24, r30
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	1f 91       	pop	r17
 a60:	0f 91       	pop	r16
 a62:	08 95       	ret

00000a64 <free>:
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	09 f4       	brne	.+2      	; 0xa6e <free+0xa>
 a6c:	81 c0       	rjmp	.+258    	; 0xb70 <free+0x10c>
 a6e:	fc 01       	movw	r30, r24
 a70:	32 97       	sbiw	r30, 0x02	; 2
 a72:	13 82       	std	Z+3, r1	; 0x03
 a74:	12 82       	std	Z+2, r1	; 0x02
 a76:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <__flp>
 a7a:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <__flp+0x1>
 a7e:	10 97       	sbiw	r26, 0x00	; 0
 a80:	81 f4       	brne	.+32     	; 0xaa2 <free+0x3e>
 a82:	20 81       	ld	r18, Z
 a84:	31 81       	ldd	r19, Z+1	; 0x01
 a86:	82 0f       	add	r24, r18
 a88:	93 1f       	adc	r25, r19
 a8a:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <__brkval>
 a8e:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <__brkval+0x1>
 a92:	28 17       	cp	r18, r24
 a94:	39 07       	cpc	r19, r25
 a96:	51 f5       	brne	.+84     	; 0xaec <free+0x88>
 a98:	f0 93 35 03 	sts	0x0335, r31	; 0x800335 <__brkval+0x1>
 a9c:	e0 93 34 03 	sts	0x0334, r30	; 0x800334 <__brkval>
 aa0:	67 c0       	rjmp	.+206    	; 0xb70 <free+0x10c>
 aa2:	ed 01       	movw	r28, r26
 aa4:	20 e0       	ldi	r18, 0x00	; 0
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	ce 17       	cp	r28, r30
 aaa:	df 07       	cpc	r29, r31
 aac:	40 f4       	brcc	.+16     	; 0xabe <free+0x5a>
 aae:	4a 81       	ldd	r20, Y+2	; 0x02
 ab0:	5b 81       	ldd	r21, Y+3	; 0x03
 ab2:	9e 01       	movw	r18, r28
 ab4:	41 15       	cp	r20, r1
 ab6:	51 05       	cpc	r21, r1
 ab8:	f1 f0       	breq	.+60     	; 0xaf6 <free+0x92>
 aba:	ea 01       	movw	r28, r20
 abc:	f5 cf       	rjmp	.-22     	; 0xaa8 <free+0x44>
 abe:	d3 83       	std	Z+3, r29	; 0x03
 ac0:	c2 83       	std	Z+2, r28	; 0x02
 ac2:	40 81       	ld	r20, Z
 ac4:	51 81       	ldd	r21, Z+1	; 0x01
 ac6:	84 0f       	add	r24, r20
 ac8:	95 1f       	adc	r25, r21
 aca:	c8 17       	cp	r28, r24
 acc:	d9 07       	cpc	r29, r25
 ace:	59 f4       	brne	.+22     	; 0xae6 <free+0x82>
 ad0:	88 81       	ld	r24, Y
 ad2:	99 81       	ldd	r25, Y+1	; 0x01
 ad4:	84 0f       	add	r24, r20
 ad6:	95 1f       	adc	r25, r21
 ad8:	02 96       	adiw	r24, 0x02	; 2
 ada:	91 83       	std	Z+1, r25	; 0x01
 adc:	80 83       	st	Z, r24
 ade:	8a 81       	ldd	r24, Y+2	; 0x02
 ae0:	9b 81       	ldd	r25, Y+3	; 0x03
 ae2:	93 83       	std	Z+3, r25	; 0x03
 ae4:	82 83       	std	Z+2, r24	; 0x02
 ae6:	21 15       	cp	r18, r1
 ae8:	31 05       	cpc	r19, r1
 aea:	29 f4       	brne	.+10     	; 0xaf6 <free+0x92>
 aec:	f0 93 37 03 	sts	0x0337, r31	; 0x800337 <__flp+0x1>
 af0:	e0 93 36 03 	sts	0x0336, r30	; 0x800336 <__flp>
 af4:	3d c0       	rjmp	.+122    	; 0xb70 <free+0x10c>
 af6:	e9 01       	movw	r28, r18
 af8:	fb 83       	std	Y+3, r31	; 0x03
 afa:	ea 83       	std	Y+2, r30	; 0x02
 afc:	49 91       	ld	r20, Y+
 afe:	59 91       	ld	r21, Y+
 b00:	c4 0f       	add	r28, r20
 b02:	d5 1f       	adc	r29, r21
 b04:	ec 17       	cp	r30, r28
 b06:	fd 07       	cpc	r31, r29
 b08:	61 f4       	brne	.+24     	; 0xb22 <free+0xbe>
 b0a:	80 81       	ld	r24, Z
 b0c:	91 81       	ldd	r25, Z+1	; 0x01
 b0e:	84 0f       	add	r24, r20
 b10:	95 1f       	adc	r25, r21
 b12:	02 96       	adiw	r24, 0x02	; 2
 b14:	e9 01       	movw	r28, r18
 b16:	99 83       	std	Y+1, r25	; 0x01
 b18:	88 83       	st	Y, r24
 b1a:	82 81       	ldd	r24, Z+2	; 0x02
 b1c:	93 81       	ldd	r25, Z+3	; 0x03
 b1e:	9b 83       	std	Y+3, r25	; 0x03
 b20:	8a 83       	std	Y+2, r24	; 0x02
 b22:	e0 e0       	ldi	r30, 0x00	; 0
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	12 96       	adiw	r26, 0x02	; 2
 b28:	8d 91       	ld	r24, X+
 b2a:	9c 91       	ld	r25, X
 b2c:	13 97       	sbiw	r26, 0x03	; 3
 b2e:	00 97       	sbiw	r24, 0x00	; 0
 b30:	19 f0       	breq	.+6      	; 0xb38 <free+0xd4>
 b32:	fd 01       	movw	r30, r26
 b34:	dc 01       	movw	r26, r24
 b36:	f7 cf       	rjmp	.-18     	; 0xb26 <free+0xc2>
 b38:	8d 91       	ld	r24, X+
 b3a:	9c 91       	ld	r25, X
 b3c:	11 97       	sbiw	r26, 0x01	; 1
 b3e:	9d 01       	movw	r18, r26
 b40:	2e 5f       	subi	r18, 0xFE	; 254
 b42:	3f 4f       	sbci	r19, 0xFF	; 255
 b44:	82 0f       	add	r24, r18
 b46:	93 1f       	adc	r25, r19
 b48:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <__brkval>
 b4c:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <__brkval+0x1>
 b50:	28 17       	cp	r18, r24
 b52:	39 07       	cpc	r19, r25
 b54:	69 f4       	brne	.+26     	; 0xb70 <free+0x10c>
 b56:	30 97       	sbiw	r30, 0x00	; 0
 b58:	29 f4       	brne	.+10     	; 0xb64 <free+0x100>
 b5a:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <__flp+0x1>
 b5e:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <__flp>
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <free+0x104>
 b64:	13 82       	std	Z+3, r1	; 0x03
 b66:	12 82       	std	Z+2, r1	; 0x02
 b68:	b0 93 35 03 	sts	0x0335, r27	; 0x800335 <__brkval+0x1>
 b6c:	a0 93 34 03 	sts	0x0334, r26	; 0x800334 <__brkval>
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	08 95       	ret

00000b76 <strnlen_P>:
 b76:	fc 01       	movw	r30, r24
 b78:	05 90       	lpm	r0, Z+
 b7a:	61 50       	subi	r22, 0x01	; 1
 b7c:	70 40       	sbci	r23, 0x00	; 0
 b7e:	01 10       	cpse	r0, r1
 b80:	d8 f7       	brcc	.-10     	; 0xb78 <strnlen_P+0x2>
 b82:	80 95       	com	r24
 b84:	90 95       	com	r25
 b86:	8e 0f       	add	r24, r30
 b88:	9f 1f       	adc	r25, r31
 b8a:	08 95       	ret

00000b8c <memset>:
 b8c:	dc 01       	movw	r26, r24
 b8e:	01 c0       	rjmp	.+2      	; 0xb92 <memset+0x6>
 b90:	6d 93       	st	X+, r22
 b92:	41 50       	subi	r20, 0x01	; 1
 b94:	50 40       	sbci	r21, 0x00	; 0
 b96:	e0 f7       	brcc	.-8      	; 0xb90 <memset+0x4>
 b98:	08 95       	ret

00000b9a <strnlen>:
 b9a:	fc 01       	movw	r30, r24
 b9c:	61 50       	subi	r22, 0x01	; 1
 b9e:	70 40       	sbci	r23, 0x00	; 0
 ba0:	01 90       	ld	r0, Z+
 ba2:	01 10       	cpse	r0, r1
 ba4:	d8 f7       	brcc	.-10     	; 0xb9c <strnlen+0x2>
 ba6:	80 95       	com	r24
 ba8:	90 95       	com	r25
 baa:	8e 0f       	add	r24, r30
 bac:	9f 1f       	adc	r25, r31
 bae:	08 95       	ret

00000bb0 <fputc>:
 bb0:	0f 93       	push	r16
 bb2:	1f 93       	push	r17
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	fb 01       	movw	r30, r22
 bba:	23 81       	ldd	r18, Z+3	; 0x03
 bbc:	21 fd       	sbrc	r18, 1
 bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <fputc+0x16>
 bc0:	8f ef       	ldi	r24, 0xFF	; 255
 bc2:	9f ef       	ldi	r25, 0xFF	; 255
 bc4:	2c c0       	rjmp	.+88     	; 0xc1e <fputc+0x6e>
 bc6:	22 ff       	sbrs	r18, 2
 bc8:	16 c0       	rjmp	.+44     	; 0xbf6 <fputc+0x46>
 bca:	46 81       	ldd	r20, Z+6	; 0x06
 bcc:	57 81       	ldd	r21, Z+7	; 0x07
 bce:	24 81       	ldd	r18, Z+4	; 0x04
 bd0:	35 81       	ldd	r19, Z+5	; 0x05
 bd2:	42 17       	cp	r20, r18
 bd4:	53 07       	cpc	r21, r19
 bd6:	44 f4       	brge	.+16     	; 0xbe8 <fputc+0x38>
 bd8:	a0 81       	ld	r26, Z
 bda:	b1 81       	ldd	r27, Z+1	; 0x01
 bdc:	9d 01       	movw	r18, r26
 bde:	2f 5f       	subi	r18, 0xFF	; 255
 be0:	3f 4f       	sbci	r19, 0xFF	; 255
 be2:	31 83       	std	Z+1, r19	; 0x01
 be4:	20 83       	st	Z, r18
 be6:	8c 93       	st	X, r24
 be8:	26 81       	ldd	r18, Z+6	; 0x06
 bea:	37 81       	ldd	r19, Z+7	; 0x07
 bec:	2f 5f       	subi	r18, 0xFF	; 255
 bee:	3f 4f       	sbci	r19, 0xFF	; 255
 bf0:	37 83       	std	Z+7, r19	; 0x07
 bf2:	26 83       	std	Z+6, r18	; 0x06
 bf4:	14 c0       	rjmp	.+40     	; 0xc1e <fputc+0x6e>
 bf6:	8b 01       	movw	r16, r22
 bf8:	ec 01       	movw	r28, r24
 bfa:	fb 01       	movw	r30, r22
 bfc:	00 84       	ldd	r0, Z+8	; 0x08
 bfe:	f1 85       	ldd	r31, Z+9	; 0x09
 c00:	e0 2d       	mov	r30, r0
 c02:	09 95       	icall
 c04:	89 2b       	or	r24, r25
 c06:	e1 f6       	brne	.-72     	; 0xbc0 <fputc+0x10>
 c08:	d8 01       	movw	r26, r16
 c0a:	16 96       	adiw	r26, 0x06	; 6
 c0c:	8d 91       	ld	r24, X+
 c0e:	9c 91       	ld	r25, X
 c10:	17 97       	sbiw	r26, 0x07	; 7
 c12:	01 96       	adiw	r24, 0x01	; 1
 c14:	17 96       	adiw	r26, 0x07	; 7
 c16:	9c 93       	st	X, r25
 c18:	8e 93       	st	-X, r24
 c1a:	16 97       	sbiw	r26, 0x06	; 6
 c1c:	ce 01       	movw	r24, r28
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
 c24:	0f 91       	pop	r16
 c26:	08 95       	ret

00000c28 <__ultoa_invert>:
 c28:	fa 01       	movw	r30, r20
 c2a:	aa 27       	eor	r26, r26
 c2c:	28 30       	cpi	r18, 0x08	; 8
 c2e:	51 f1       	breq	.+84     	; 0xc84 <__ultoa_invert+0x5c>
 c30:	20 31       	cpi	r18, 0x10	; 16
 c32:	81 f1       	breq	.+96     	; 0xc94 <__ultoa_invert+0x6c>
 c34:	e8 94       	clt
 c36:	6f 93       	push	r22
 c38:	6e 7f       	andi	r22, 0xFE	; 254
 c3a:	6e 5f       	subi	r22, 0xFE	; 254
 c3c:	7f 4f       	sbci	r23, 0xFF	; 255
 c3e:	8f 4f       	sbci	r24, 0xFF	; 255
 c40:	9f 4f       	sbci	r25, 0xFF	; 255
 c42:	af 4f       	sbci	r26, 0xFF	; 255
 c44:	b1 e0       	ldi	r27, 0x01	; 1
 c46:	3e d0       	rcall	.+124    	; 0xcc4 <__ultoa_invert+0x9c>
 c48:	b4 e0       	ldi	r27, 0x04	; 4
 c4a:	3c d0       	rcall	.+120    	; 0xcc4 <__ultoa_invert+0x9c>
 c4c:	67 0f       	add	r22, r23
 c4e:	78 1f       	adc	r23, r24
 c50:	89 1f       	adc	r24, r25
 c52:	9a 1f       	adc	r25, r26
 c54:	a1 1d       	adc	r26, r1
 c56:	68 0f       	add	r22, r24
 c58:	79 1f       	adc	r23, r25
 c5a:	8a 1f       	adc	r24, r26
 c5c:	91 1d       	adc	r25, r1
 c5e:	a1 1d       	adc	r26, r1
 c60:	6a 0f       	add	r22, r26
 c62:	71 1d       	adc	r23, r1
 c64:	81 1d       	adc	r24, r1
 c66:	91 1d       	adc	r25, r1
 c68:	a1 1d       	adc	r26, r1
 c6a:	20 d0       	rcall	.+64     	; 0xcac <__ultoa_invert+0x84>
 c6c:	09 f4       	brne	.+2      	; 0xc70 <__ultoa_invert+0x48>
 c6e:	68 94       	set
 c70:	3f 91       	pop	r19
 c72:	2a e0       	ldi	r18, 0x0A	; 10
 c74:	26 9f       	mul	r18, r22
 c76:	11 24       	eor	r1, r1
 c78:	30 19       	sub	r19, r0
 c7a:	30 5d       	subi	r19, 0xD0	; 208
 c7c:	31 93       	st	Z+, r19
 c7e:	de f6       	brtc	.-74     	; 0xc36 <__ultoa_invert+0xe>
 c80:	cf 01       	movw	r24, r30
 c82:	08 95       	ret
 c84:	46 2f       	mov	r20, r22
 c86:	47 70       	andi	r20, 0x07	; 7
 c88:	40 5d       	subi	r20, 0xD0	; 208
 c8a:	41 93       	st	Z+, r20
 c8c:	b3 e0       	ldi	r27, 0x03	; 3
 c8e:	0f d0       	rcall	.+30     	; 0xcae <__ultoa_invert+0x86>
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0x5c>
 c92:	f6 cf       	rjmp	.-20     	; 0xc80 <__ultoa_invert+0x58>
 c94:	46 2f       	mov	r20, r22
 c96:	4f 70       	andi	r20, 0x0F	; 15
 c98:	40 5d       	subi	r20, 0xD0	; 208
 c9a:	4a 33       	cpi	r20, 0x3A	; 58
 c9c:	18 f0       	brcs	.+6      	; 0xca4 <__ultoa_invert+0x7c>
 c9e:	49 5d       	subi	r20, 0xD9	; 217
 ca0:	31 fd       	sbrc	r19, 1
 ca2:	40 52       	subi	r20, 0x20	; 32
 ca4:	41 93       	st	Z+, r20
 ca6:	02 d0       	rcall	.+4      	; 0xcac <__ultoa_invert+0x84>
 ca8:	a9 f7       	brne	.-22     	; 0xc94 <__ultoa_invert+0x6c>
 caa:	ea cf       	rjmp	.-44     	; 0xc80 <__ultoa_invert+0x58>
 cac:	b4 e0       	ldi	r27, 0x04	; 4
 cae:	a6 95       	lsr	r26
 cb0:	97 95       	ror	r25
 cb2:	87 95       	ror	r24
 cb4:	77 95       	ror	r23
 cb6:	67 95       	ror	r22
 cb8:	ba 95       	dec	r27
 cba:	c9 f7       	brne	.-14     	; 0xcae <__ultoa_invert+0x86>
 cbc:	00 97       	sbiw	r24, 0x00	; 0
 cbe:	61 05       	cpc	r22, r1
 cc0:	71 05       	cpc	r23, r1
 cc2:	08 95       	ret
 cc4:	9b 01       	movw	r18, r22
 cc6:	ac 01       	movw	r20, r24
 cc8:	0a 2e       	mov	r0, r26
 cca:	06 94       	lsr	r0
 ccc:	57 95       	ror	r21
 cce:	47 95       	ror	r20
 cd0:	37 95       	ror	r19
 cd2:	27 95       	ror	r18
 cd4:	ba 95       	dec	r27
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__ultoa_invert+0xa2>
 cd8:	62 0f       	add	r22, r18
 cda:	73 1f       	adc	r23, r19
 cdc:	84 1f       	adc	r24, r20
 cde:	95 1f       	adc	r25, r21
 ce0:	a0 1d       	adc	r26, r0
 ce2:	08 95       	ret

00000ce4 <__prologue_saves__>:
 ce4:	2f 92       	push	r2
 ce6:	3f 92       	push	r3
 ce8:	4f 92       	push	r4
 cea:	5f 92       	push	r5
 cec:	6f 92       	push	r6
 cee:	7f 92       	push	r7
 cf0:	8f 92       	push	r8
 cf2:	9f 92       	push	r9
 cf4:	af 92       	push	r10
 cf6:	bf 92       	push	r11
 cf8:	cf 92       	push	r12
 cfa:	df 92       	push	r13
 cfc:	ef 92       	push	r14
 cfe:	ff 92       	push	r15
 d00:	0f 93       	push	r16
 d02:	1f 93       	push	r17
 d04:	cf 93       	push	r28
 d06:	df 93       	push	r29
 d08:	cd b7       	in	r28, 0x3d	; 61
 d0a:	de b7       	in	r29, 0x3e	; 62
 d0c:	ca 1b       	sub	r28, r26
 d0e:	db 0b       	sbc	r29, r27
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
 d1a:	09 94       	ijmp

00000d1c <__epilogue_restores__>:
 d1c:	2a 88       	ldd	r2, Y+18	; 0x12
 d1e:	39 88       	ldd	r3, Y+17	; 0x11
 d20:	48 88       	ldd	r4, Y+16	; 0x10
 d22:	5f 84       	ldd	r5, Y+15	; 0x0f
 d24:	6e 84       	ldd	r6, Y+14	; 0x0e
 d26:	7d 84       	ldd	r7, Y+13	; 0x0d
 d28:	8c 84       	ldd	r8, Y+12	; 0x0c
 d2a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d2c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d2e:	b9 84       	ldd	r11, Y+9	; 0x09
 d30:	c8 84       	ldd	r12, Y+8	; 0x08
 d32:	df 80       	ldd	r13, Y+7	; 0x07
 d34:	ee 80       	ldd	r14, Y+6	; 0x06
 d36:	fd 80       	ldd	r15, Y+5	; 0x05
 d38:	0c 81       	ldd	r16, Y+4	; 0x04
 d3a:	1b 81       	ldd	r17, Y+3	; 0x03
 d3c:	aa 81       	ldd	r26, Y+2	; 0x02
 d3e:	b9 81       	ldd	r27, Y+1	; 0x01
 d40:	ce 0f       	add	r28, r30
 d42:	d1 1d       	adc	r29, r1
 d44:	0f b6       	in	r0, 0x3f	; 63
 d46:	f8 94       	cli
 d48:	de bf       	out	0x3e, r29	; 62
 d4a:	0f be       	out	0x3f, r0	; 63
 d4c:	cd bf       	out	0x3d, r28	; 61
 d4e:	ed 01       	movw	r28, r26
 d50:	08 95       	ret

00000d52 <_exit>:
 d52:	f8 94       	cli

00000d54 <__stop_program>:
 d54:	ff cf       	rjmp	.-2      	; 0xd54 <__stop_program>
